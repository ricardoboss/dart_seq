// Mocks generated by Mockito 5.4.4 from annotations
// in dart_seq/test/seq_logger_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dart_seq/dart_seq.dart' as _i2;
import 'package:dart_seq/src/seq_event.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SeqClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSeqClient extends _i1.Mock implements _i2.SeqClient {
  MockSeqClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> sendEvents(List<_i4.SeqEvent>? events) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEvents,
          [events],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [SeqCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockSeqCache extends _i1.Mock implements _i2.SeqCache {
  MockSeqCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get count => (super.noSuchMethod(
        Invocation.getter(#count),
        returnValue: 0,
      ) as int);

  @override
  _i3.Future<void> record(_i4.SeqEvent? event) => (super.noSuchMethod(
        Invocation.method(
          #record,
          [event],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<_i4.SeqEvent> peek(int? count) => (super.noSuchMethod(
        Invocation.method(
          #peek,
          [count],
        ),
        returnValue: _i3.Stream<_i4.SeqEvent>.empty(),
      ) as _i3.Stream<_i4.SeqEvent>);

  @override
  _i3.Future<void> remove(int? count) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [count],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
